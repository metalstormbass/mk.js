{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-03-11T08:25:47.093051Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
      "disclosureTime": "2020-03-10T08:22:24Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.2.1",
        "1.2.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.0.0 <1.1.1"
          ]
        },
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.setKey"
          },
          "version": [
            "<0.2.1",
            ">=1.1.1 <1.2.3"
          ]
        }
      ],
      "id": "SNYK-JS-MINIMIST-559764",
      "identifiers": {
        "CVE": [
          "CVE-2020-7598"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-vh95-rmgr-6w4m"
        ],
        "NSP": [
          1179
        ]
      },
      "language": "js",
      "modificationTime": "2020-12-20T09:48:43.878574Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-03-11T08:22:19Z",
      "references": [
        {
          "title": "Command Injection PoC",
          "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
        },
        {
          "title": "GitHub Fix Commit #1",
          "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
        },
        {
          "title": "GitHub Fix Commit #2",
          "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
        },
        {
          "title": "Snyk Research Blog",
          "url": "https://snyk.io/blog/prototype-pollution-minimist/"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.2.1",
          ">=1.0.0 <1.2.3"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Prototype Pollution",
      "originalSeverity": "medium",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "mkdirp@0.5.1",
        "minimist@0.0.8"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "0.0.8"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2018-11-11T12:38:44.575882Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.8,
      "description": "## Overview\n[morgan](https://www.npmjs.com/package/morgan) is a HTTP request logger middleware for node.js.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. An attacker could use the format parameter to inject arbitrary commands.\n## Remediation\nUpgrade `morgan` to version 1.9.1 or higher.\n## References\n- [GitHub Commit](https://github.com/expressjs/morgan/commit/e329663836809de4be557b200a5b983ab8b4e6c2)\n- [HackerOne Report](https://hackerone.com/reports/390881)\n",
      "disclosureTime": "2018-11-09T12:12:59Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.9.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "compile"
          },
          "version": [
            "<1.9.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "compile"
          },
          "version": [
            "<1.9.1"
          ]
        }
      ],
      "id": "SNYK-JS-MORGAN-72579",
      "identifiers": {
        "CVE": [
          "CVE-2019-5413"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:37:02.657540Z",
      "moduleName": "morgan",
      "packageManager": "npm",
      "packageName": "morgan",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-11-12T17:29:35Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/expressjs/morgan/commit/e329663836809de4be557b200a5b983ab8b4e6c2"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/390881"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.9.1"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Arbitrary Code Injection",
      "originalSeverity": "medium",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "morgan@1.6.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "morgan",
      "version": "1.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-30T15:11:27.221896Z",
      "credit": [
        "ni8walk3r"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[socket.io](https://github.com/socketio/socket.io) is a node.js realtime framework server.\n\nAffected versions of this package are vulnerable to Insecure Defaults due to CORS Misconfiguration. All domains are whitelisted by default.\n## Remediation\nUpgrade `socket.io` to version 2.4.0 or higher.\n## References\n- [GitHub Issue](https://github.com/socketio/socket.io/issues/3671)\n- [HackerOne Report](https://hackerone.com/reports/931197)\n",
      "disclosureTime": "2020-10-30T14:01:53Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-SOCKETIO-1024859",
      "identifiers": {
        "CVE": [
          "CVE-2020-28481"
        ],
        "CWE": [
          "CWE-453"
        ],
        "GHSA": [
          "GHSA-fxwf-4rqh-v8g3"
        ]
      },
      "language": "js",
      "modificationTime": "2021-01-07T16:40:36.503041Z",
      "moduleName": "socket.io",
      "packageManager": "npm",
      "packageName": "socket.io",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-01-07T16:40:36Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/socketio/socket.io/issues/3671"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/931197"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.4.0"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Insecure Defaults",
      "originalSeverity": "medium",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19"
      ],
      "upgradePath": [
        false,
        "socket.io@2.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "socket.io",
      "version": "0.9.19"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-05T17:08:00.704037Z",
      "credit": [
        "rinsuki"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[xmlhttprequest](https://github.com/driverdan/node-XMLHttpRequest) is a wrapper for the built-in http client to emulate the browser XMLHttpRequest object.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. Provided requests are sent synchronously (`async=False` on `xhr.open`), malicious user input flowing into `xhr.send` could result in arbitrary code being injected and run.\r\n\r\n### POC\r\n```\r\nconst { XMLHttpRequest } = require(\"xmlhttprequest\")\r\n\r\nconst xhr = new XMLHttpRequest()\r\nxhr.open(\"POST\", \"http://localhost.invalid/\", false /* use synchronize request */)\r\nxhr.send(\"\\\\');require(\\\"fs\\\").writeFileSync(\\\"/tmp/aaaaa.txt\\\", \\\"poc-20210306\\\");req.end();//\")\r\n```\n## Remediation\nUpgrade `xmlhttprequest` to version 1.7.0 or higher.\n## References\n- [Vulnerable Code](https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480)\n",
      "disclosureTime": "2021-03-05T17:05:16Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.7.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-XMLHTTPREQUEST-1082935",
      "identifiers": {
        "CVE": [
          "CVE-2020-28502"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "js",
      "modificationTime": "2021-03-05T17:15:16.311366Z",
      "moduleName": "xmlhttprequest",
      "packageManager": "npm",
      "packageName": "xmlhttprequest",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-03-05T17:15:16.552302Z",
      "references": [
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.7.0"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Arbitrary Code Injection",
      "originalSeverity": "high",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19",
        "socket.io-client@0.9.16",
        "xmlhttprequest@1.4.2"
      ],
      "upgradePath": [
        false,
        "socket.io@1.0.1",
        "socket.io-client@1.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "xmlhttprequest",
      "version": "1.4.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N/E:F/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-BASE64URL-12144"
      ],
      "creationTime": "2018-03-04T10:54:40.689000Z",
      "credit": [
        "ChALkeR"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\r\n[base64-url](https://www.npmjs.com/package/base64-url) Base64 encode, decode, escape and unescape for URL applications.\r\n\r\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. An attacker may extract sensitive data from uninitialized memory or may cause a DoS by passing in a large number, in setups where typed user input can be passed (e.g. from JSON).\r\n\r\n## Details\r\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\r\n\r\n\r\n## Remediation\r\nUpgrade `base64-url` to version 2.0.0 or higher.\r\n**Note** This is vulnerable only for Node <=4\r\n\r\n## References\r\n- [HackerOne Report](https://hackerone.com/reports/321692)",
      "disclosureTime": "2018-05-12T10:54:40Z",
      "exploit": "Functional",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:base64-url:20180512",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-BASE64URL-12144"
        ],
        "CVE": [],
        "CWE": [
          "CWE-201"
        ],
        "GHSA": [
          "GHSA-j4mr-9xw3-c9jx"
        ],
        "NSP": [
          660
        ]
      },
      "language": "js",
      "modificationTime": "2019-06-02T07:14:06.300542Z",
      "moduleName": "base64-url",
      "packageManager": "npm",
      "packageName": "base64-url",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-13T14:26:26Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/321692"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Uninitialized Memory Exposure",
      "originalSeverity": "high",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "express-session@1.11.3",
        "uid-safe@2.0.0",
        "base64-url@1.2.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "base64-url",
      "version": "1.2.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.15.5",
        "debug@2.6.9"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "send@0.13.0",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.15.5",
        "send@0.15.6",
        "debug@2.6.9"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "body-parser@1.13.3",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "compression@1.5.2",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "connect-timeout@1.6.2",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "express-session@1.11.3",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "finalhandler@0.4.0",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "morgan@1.6.1",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-index@1.7.3",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ],
        "NSP": [
          534
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:59.642834Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-static@1.10.3",
        "send@0.13.2",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-9qj9-36jm-prpv"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "fresh@0.3.0"
      ],
      "upgradePath": [
        false,
        "express@4.15.5",
        "fresh@0.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-9qj9-36jm-prpv"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "fresh@0.3.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-9qj9-36jm-prpv"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "send@0.13.0",
        "fresh@0.3.0"
      ],
      "upgradePath": [
        false,
        "express@4.15.5",
        "send@0.15.6",
        "fresh@0.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-9qj9-36jm-prpv"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-favicon@2.3.2",
        "fresh@0.3.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-9qj9-36jm-prpv"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-static@1.10.3",
        "send@0.13.2",
        "fresh@0.3.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-wrvr-8mpx-r7pp"
        ],
        "NSP": [
          535
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.861216Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "send@0.13.0",
        "mime@1.3.4"
      ],
      "upgradePath": [
        false,
        "express@4.16.0",
        "send@0.16.0",
        "mime@1.4.1"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "mime",
      "version": "1.3.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-wrvr-8mpx-r7pp"
        ],
        "NSP": [
          535
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.861216Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-static@1.10.3",
        "send@0.13.2",
        "mime@1.3.4"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "mime",
      "version": "1.3.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.15.3",
        "debug@2.6.7",
        "ms@2.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "send@0.13.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.15.3",
        "send@0.15.3",
        "ms@2.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "send@0.13.0",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.15.3",
        "send@0.15.3",
        "debug@2.6.7",
        "ms@2.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "connect-timeout@1.6.2",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "body-parser@1.13.3",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "compression@1.5.2",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "connect-timeout@1.6.2",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "express-session@1.11.3",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "finalhandler@0.4.0",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "morgan@1.6.1",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-index@1.7.3",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-static@1.10.3",
        "send@0.13.2",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-static@1.10.3",
        "send@0.13.2",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "severityWithCritical": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-favicon@2.3.2",
        "ms@0.7.2"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-NEGOTIATOR-10104"
      ],
      "creationTime": "2016-06-16T18:00:02.240000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[negotiator](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing `Accept-Language` http header.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `negotiator` to version 0.6.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c)\n\n- [OSWAP Advisory](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n",
      "disclosureTime": "2016-06-16T17:36:06Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.6.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/language.js",
            "functionName": "parseLanguage"
          },
          "version": [
            "<0.6.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/language.js",
            "functionName": "parseLanguage"
          },
          "version": [
            "<0.6.1"
          ]
        }
      ],
      "id": "npm:negotiator:20160616",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-NEGOTIATOR-10104"
        ],
        "CVE": [
          "CVE-2016-10539"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-7mc5-chhp-fmc3"
        ],
        "NSP": [
          106
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:17.044101Z",
      "moduleName": "negotiator",
      "packageManager": "npm",
      "packageName": "negotiator",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:0",
          "modificationTime": "2019-12-03T11:40:45.829417Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "0.6.0"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:1",
          "modificationTime": "2019-12-03T11:40:45.830538Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "<= 0.5.3 > 0.4.7"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:2",
          "modificationTime": "2019-12-03T11:40:45.831546Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "<= 0.4.7 > 0.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:3",
          "modificationTime": "2019-12-03T11:40:45.832684Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "0.1.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2016-06-16T17:36:06Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c"
        },
        {
          "title": "OSWAP Advisory",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.6.1"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "compression@1.5.2",
        "accepts@1.2.13",
        "negotiator@0.5.3"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "negotiator",
      "version": "0.5.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-NEGOTIATOR-10104"
      ],
      "creationTime": "2016-06-16T18:00:02.240000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[negotiator](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing `Accept-Language` http header.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `negotiator` to version 0.6.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c)\n\n- [OSWAP Advisory](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n",
      "disclosureTime": "2016-06-16T17:36:06Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.6.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/language.js",
            "functionName": "parseLanguage"
          },
          "version": [
            "<0.6.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/language.js",
            "functionName": "parseLanguage"
          },
          "version": [
            "<0.6.1"
          ]
        }
      ],
      "id": "npm:negotiator:20160616",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-NEGOTIATOR-10104"
        ],
        "CVE": [
          "CVE-2016-10539"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-7mc5-chhp-fmc3"
        ],
        "NSP": [
          106
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:17.044101Z",
      "moduleName": "negotiator",
      "packageManager": "npm",
      "packageName": "negotiator",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:0",
          "modificationTime": "2019-12-03T11:40:45.829417Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "0.6.0"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:1",
          "modificationTime": "2019-12-03T11:40:45.830538Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "<= 0.5.3 > 0.4.7"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:2",
          "modificationTime": "2019-12-03T11:40:45.831546Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "<= 0.4.7 > 0.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:3",
          "modificationTime": "2019-12-03T11:40:45.832684Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "0.1.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2016-06-16T17:36:06Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c"
        },
        {
          "title": "OSWAP Advisory",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.6.1"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "serve-index@1.7.3",
        "accepts@1.2.13",
        "negotiator@0.5.3"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "negotiator",
      "version": "0.5.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10407"
      ],
      "creationTime": "2017-02-14T11:44:54.163000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
      "disclosureTime": "2017-02-13T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.4",
        "6.1.2",
        "6.2.3",
        "6.3.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "id": "npm:qs:20170213",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10407"
        ],
        "CVE": [
          "CVE-2017-1000048"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.880024Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:0",
          "modificationTime": "2019-12-03T11:40:45.855245Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
          ],
          "version": "=6.3.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:1",
          "modificationTime": "2019-12-03T11:40:45.856271Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
          ],
          "version": "=6.3.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:2",
          "modificationTime": "2019-12-03T11:40:45.857318Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
          ],
          "version": "=6.2.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:3",
          "modificationTime": "2019-12-03T11:40:45.858334Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
          ],
          "version": "=6.2.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:4",
          "modificationTime": "2019-12-03T11:40:45.859411Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
          ],
          "version": "=6.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:5",
          "modificationTime": "2019-12-03T11:40:45.860523Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
          ],
          "version": "=6.1.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:6",
          "modificationTime": "2019-12-03T11:40:45.861504Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
          ],
          "version": "=6.0.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:7",
          "modificationTime": "2019-12-03T11:40:45.862615Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
          ],
          "version": "=6.0.3"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-03-01T10:00:54Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/ljharb/qs/issues/200"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.0.4",
          ">=6.1.0 <6.1.2",
          ">=6.2.0 <6.2.3",
          ">=6.3.0 <6.3.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Prototype Override Protection Bypass",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "qs@4.0.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "qs",
      "version": "4.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10407"
      ],
      "creationTime": "2017-02-14T11:44:54.163000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
      "disclosureTime": "2017-02-13T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.4",
        "6.1.2",
        "6.2.3",
        "6.3.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "id": "npm:qs:20170213",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10407"
        ],
        "CVE": [
          "CVE-2017-1000048"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.880024Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:0",
          "modificationTime": "2019-12-03T11:40:45.855245Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
          ],
          "version": "=6.3.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:1",
          "modificationTime": "2019-12-03T11:40:45.856271Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
          ],
          "version": "=6.3.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:2",
          "modificationTime": "2019-12-03T11:40:45.857318Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
          ],
          "version": "=6.2.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:3",
          "modificationTime": "2019-12-03T11:40:45.858334Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
          ],
          "version": "=6.2.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:4",
          "modificationTime": "2019-12-03T11:40:45.859411Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
          ],
          "version": "=6.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:5",
          "modificationTime": "2019-12-03T11:40:45.860523Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
          ],
          "version": "=6.1.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:6",
          "modificationTime": "2019-12-03T11:40:45.861504Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
          ],
          "version": "=6.0.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:7",
          "modificationTime": "2019-12-03T11:40:45.862615Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
          ],
          "version": "=6.0.3"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-03-01T10:00:54Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/ljharb/qs/issues/200"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.0.4",
          ">=6.1.0 <6.1.2",
          ">=6.2.0 <6.2.3",
          ">=6.3.0 <6.3.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Prototype Override Protection Bypass",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "body-parser@1.13.3",
        "qs@4.0.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "qs",
      "version": "4.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10059"
      ],
      "creationTime": "2015-11-06T02:09:36.186000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\nThe `parse()` function in the [`uglify-js`](https://www.npmjs.com/package/uglify-js) package prior to version 2.6.0 is vulnerable to regular expression denial of service (ReDoS) attacks when long inputs of certain patterns are processed.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade to version `2.6.0` or greater.\r\nIf a direct dependency update is not possible, use `snyk wizard` to patch this vulnerability.\r\n\r\n## References\r\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)",
      "disclosureTime": "2015-10-24T21:01:32Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "id": "npm:uglify-js:20151024",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10059"
        ],
        "CVE": [
          "CVE-2015-8858"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-c9f4-xj24-8jqx"
        ],
        "NSP": [
          48
        ]
      },
      "language": "js",
      "modificationTime": "2019-03-05T10:54:37.391574Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:0",
          "modificationTime": "2019-12-03T11:40:45.767604Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk_inc.patch"
          ],
          "version": "<= 2.4.23 >=2.2.0"
        },
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:1",
          "modificationTime": "2019-12-03T11:40:45.768705Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk.patch"
          ],
          "version": "<2.6.0 >2.4.23"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS2/commit/63d35f8f6db6d90d6142132d2d5f0bd5d3d698aa"
        },
        {
          "title": "OWASP - ReDoS",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.0"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19",
        "socket.io-client@0.9.16",
        "uglify-js@1.2.5"
      ],
      "upgradePath": [
        false,
        "socket.io@1.0.1",
        "socket.io-client@1.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "uglify-js",
      "version": "1.2.5"
    },
    {
      "license": "BSD-2-Clause",
      "semver": {
        "vulnerable": [
          ">=0"
        ]
      },
      "id": "snyk:lic:npm:uglify-js:BSD-2-Clause",
      "type": "license",
      "packageManager": "npm",
      "language": "js",
      "packageName": "uglify-js",
      "title": "BSD-2-Clause license",
      "description": "BSD-2-Clause license",
      "publicationTime": "2021-03-28T20:51:33.117Z",
      "creationTime": "2021-03-28T20:51:33.117Z",
      "patches": [],
      "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
      "severity": "medium",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19",
        "socket.io-client@0.9.16",
        "uglify-js@1.2.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "uglify-js",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-WS-10072"
      ],
      "creationTime": "2016-01-05T12:38:01.749000Z",
      "credit": [
        "Feross Aboukhadijeh",
        "Mathias Buss Madsen"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[`ws`](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\nAffected versions of the package are vulnerable to Uninitialized Memory Exposure.\n\nA client side memory disclosure vulnerability exists in ping functionality of the ws service. When a client sends a ping request and provides an integer value as ping data, it will result in leaking an uninitialized memory buffer.\n\nThis is a result of unobstructed use of the `Buffer` constructor, whose [insecure default constructor increases the odds of memory leakage](https://snyk.io/blog/exploiting-buffer/).\n\n`ws`'s `ping` function uses the default `Buffer` constructor as-is, making it easy to append uninitialized memory to an existing list. If the value of the buffer list is exposed to users, it may expose raw memory, potentially holding secrets, private data and code.\n\n**Proof of Concept:**\n```js\nvar ws = require('ws')\n\nvar server = new ws.Server({ port: 9000 })\nvar client = new ws('ws://localhost:9000')\n\nclient.on('open', function () {\n  console.log('open')\n  client.ping(50) // this makes the client allocate an uninitialized buffer of 50 bytes and send it to the server\n\n  client.on('pong', function (data) {\n    console.log('got pong')\n    console.log(data)\n  })\n})\n```\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\nSimilar vulnerabilities were discovered in [request](https://snyk.io/vuln/npm:request:20160119), [mongoose](https://snyk.io/vuln/npm:mongoose:20160116), [ws](https://snyk.io/vuln/npm:ws:20160104) and [sequelize](https://snyk.io/vuln/npm:sequelize:20160115).\n\n## References\n- [GitHub Release](https://github.com/websockets/ws/releases/tag/1.0.1)\n- [GitHub Issue](https://github.com/nodejs/node-v0.x-archive/issues/4525)\n",
      "disclosureTime": "2016-01-04T19:34:19.734000Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:ws:20160104",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-WS-10072"
        ],
        "CVE": [
          "CVE-2016-10518"
        ],
        "CWE": [
          "CWE-201"
        ],
        "GHSA": [
          "GHSA-2mhh-w6q8-5hxw"
        ],
        "NSP": [
          67
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:40.782579Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [
        {
          "comments": [
            "https://github.com/websockets/ws/commit/29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "id": "patch:npm:ws:20160104:0",
          "modificationTime": "2019-12-03T11:40:45.782326Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ws/20160104/ws_20160104_0_0_29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "version": "< 1.0.1 >= 0.4.27"
        },
        {
          "comments": [
            "https://github.com/websockets/ws/commit/29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "id": "patch:npm:ws:20160104:1",
          "modificationTime": "2019-12-03T11:40:45.783464Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ws/20160104/ws_20160104_0_1_29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "version": "< 0.4.27 >= 0.4.8"
        },
        {
          "comments": [
            "https://github.com/websockets/ws/commit/29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "id": "patch:npm:ws:20160104:2",
          "modificationTime": "2019-12-03T11:40:45.784516Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ws/20160104/ws_20160104_0_2_29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "version": "< 0.4.8 >= 0.3.9"
        },
        {
          "comments": [
            "https://github.com/websockets/ws/commit/29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "id": "patch:npm:ws:20160104:3",
          "modificationTime": "2019-12-03T11:40:45.785759Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ws/20160104/ws_20160104_0_3_29293ed11b679e0366fa0f6bb9310b330dafd795.patch"
          ],
          "version": "=0.3.8"
        }
      ],
      "proprietary": false,
      "publicationTime": "2016-01-05T12:38:01.749000Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/nodejs/node-v0.x-archive/issues/4525"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/websockets/ws/releases/tag/1.0.1"
        }
      ],
      "semver": {
        "vulnerable": [
          "< 1.0.1"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Remote Memory Exposure",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19",
        "socket.io-client@0.9.16",
        "ws@0.4.32"
      ],
      "upgradePath": [
        false,
        "socket.io@1.0.1",
        "socket.io-client@1.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ws",
      "version": "0.4.32"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-WS-10111"
      ],
      "creationTime": "2016-06-24T18:00:02.350000Z",
      "credit": [
        "Fedor Indutny"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`ws`](https://www.npmjs.com/package/ws) is a WebSocket client and server implementation.\r\n\r\n Affected versions of this package did not limit the size of an incoming payload before it was processed by default. As a result, a very large payload (over 256MB in size) could lead to a failed allocation and crash the node process - enabling a [Denial of Service](https://en.wikipedia.org/wiki/Denial-of-service_attack) attack.\r\n\r\nWhile 256MB may seem excessive, note that the attack is likely to be sent from another server, not an end-user computer, using data-center connection speeds. In those speeds, a payload of this size can be transmitted in seconds.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpdate to version 1.1.1 or greater, which sets a default `maxPayload` of 100MB.\r\nIf you cannot upgrade, apply a Snyk patch, or provide `ws` with options setting the `maxPayload` to an appropriate size that is smaller than 256MB.\r\n\r\n## References\r\n- [WS Issue](https://github.com/websockets/ws/commit/0328a8f49f004f98d2913016214e93b2fc2713bc)\r\n- [Resulting crash in Node](https://github.com/nodejs/node/issues/7388)",
      "disclosureTime": "2016-06-24T17:13:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.1.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/WebSocketServer.js",
            "functionName": "WebSocketServer"
          },
          "version": [
            "<1.1.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/WebSocketServer.js",
            "functionName": "WebSocketServer"
          },
          "version": [
            "<1.1.1"
          ]
        }
      ],
      "id": "npm:ws:20160624",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-WS-10111"
        ],
        "CVE": [
          "CVE-2016-10542"
        ],
        "CWE": [
          "CWE-410"
        ],
        "GHSA": [
          "GHSA-6663-c963-2gqg"
        ],
        "NSP": [
          120
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:55.118099Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ws:20160624:0",
          "modificationTime": "2019-12-03T11:40:45.837270Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ws/20160624/ws_20160624_0_0_0328a8f49f004f98d2913016214e93b2fc2713bc.patch"
          ],
          "version": "=1.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ws:20160624:1",
          "modificationTime": "2019-12-03T11:40:45.838293Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ws/20160624/ws_20160624_0_1_101_sio.patch"
          ],
          "version": "=1.0.1"
        }
      ],
      "proprietary": false,
      "publicationTime": "2016-06-26T17:13:33Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/0328a8f49f004f98d2913016214e93b2fc2713bc"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/nodejs/node/issues/7388"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.1.1"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19",
        "socket.io-client@0.9.16",
        "ws@0.4.32"
      ],
      "upgradePath": [
        false,
        "socket.io@1.0.1",
        "socket.io-client@1.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "0.4.32"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [
        "SNYK-JS-WS-10399"
      ],
      "creationTime": "2016-11-23T13:12:00.207000Z",
      "credit": [
        "AJ ONeal"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[`ws`](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of the package use the cryptographically insecure `Math.random()` which can produce predictable values and should not be used in security-sensitive context.\n\n### Details\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\n\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.\n\nYou can read more about node's insecure `Math.random()` in [Mike Malone's post](https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d).\n\n## Remediation\nUpgrade `ws` to version 1.1.2 or higher.\n\n## References\n- [GitHub PR](https://github.com/websockets/ws/pull/832)\n- [GitHub Commit](https://github.com/websockets/ws/commit/7253f06f5432c76f3e82e2c055fcea08b612d8b2)\n- [Mike Malone's Blog](https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d#.6wcldperq)\n",
      "disclosureTime": "2016-09-19T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.1.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:ws:20160920",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-WS-10399"
        ],
        "CVE": [],
        "CWE": [
          "CWE-330"
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:50.855102Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ws:20160920:0",
          "modificationTime": "2019-12-03T11:40:45.854178Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ws/20160920/ws_20160920_0_0.patch"
          ],
          "version": "<1.1.2 >=0.4.31"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-02-07T18:12:00.207000Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/7253f06f5432c76f3e82e2c055fcea08b612d8b2"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/websockets/ws/pull/832"
        },
        {
          "title": "Mike Malone's Blog",
          "url": "https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d%23.6wcldperq"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.1.2"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Insecure Randomness",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19",
        "socket.io-client@0.9.16",
        "ws@0.4.32"
      ],
      "upgradePath": [
        false,
        "socket.io@1.0.1",
        "socket.io-client@1.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ws",
      "version": "0.4.32"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:F/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-WS-10839"
      ],
      "creationTime": "2017-11-09T09:38:58.245000Z",
      "credit": [
        "Nick Starke",
        "Ryan Knell"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nattacks. A specially crafted value of the `Sec-WebSocket-Extensions` header that used `Object.prototype` property names as extension or parameter names could be used to make a ws server crash.\r\n\r\n**PoC:**\r\n\r\n```js\r\nconst WebSocket = require('ws');\r\nconst net = require('net');\r\n\r\nconst wss = new WebSocket.Server({ port: 3000 }, function () {\r\n  const payload = 'constructor';  // or ',;constructor'\r\n\r\n  const request = [\r\n    'GET / HTTP/1.1',\r\n    'Connection: Upgrade',\r\n    'Sec-WebSocket-Key: test',\r\n    'Sec-WebSocket-Version: 8',\r\n    `Sec-WebSocket-Extensions: ${payload}`,\r\n    'Upgrade: websocket',\r\n    '\\r\\n'\r\n  ].join('\\r\\n');\r\n\r\n  const socket = net.connect(3000, function () {\r\n    socket.resume();\r\n    socket.write(request);\r\n  });\r\n});\r\n```\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `ws` to version 1.1.5, 3.3.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/websockets/ws/commit/c4fe46608acd61fbf7397eadc47378903f95b78a)\n\n- [GitHub Commit](https://github.com/websockets/ws/commit/f8fdcd40ac8be7318a6ee41f5ceb7e77c995b407)\n\n- [GitHub Release](https://github.com/websockets/ws/releases/tag/3.3.1)\n",
      "disclosureTime": "2017-11-08T22:00:00Z",
      "exploit": "Functional",
      "fixedIn": [
        "1.1.5",
        "3.3.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/Extensions.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.6.0 <1.1.5",
            ">=2.0.0 <3.3.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/Extensions.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.6.0 <1.1.5",
            ">=2.0.0 <3.3.1"
          ]
        }
      ],
      "id": "npm:ws:20171108",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-WS-10839"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-5v72-xg48-5rpm"
        ],
        "NSP": [
          550
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:20.892454Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-11-09T09:38:58Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/c4fe46608acd61fbf7397eadc47378903f95b78a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/f8fdcd40ac8be7318a6ee41f5ceb7e77c995b407"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/websockets/ws/releases/tag/3.3.1"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.1.5",
          ">=2.0.0 <3.3.1"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Denial of Service (DoS)",
      "originalSeverity": "high",
      "from": [
        "mk.js-server@0.0.1",
        "socket.io@0.9.19",
        "socket.io-client@0.9.16",
        "ws@0.4.32"
      ],
      "upgradePath": [
        false,
        "socket.io@1.0.1",
        "socket.io-client@1.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "0.4.32"
    },
    {
      "license": "BSD-2-Clause",
      "semver": {
        "vulnerable": [
          ">=0.1.0 <1.0.0"
        ]
      },
      "id": "snyk:lic:npm:stream-counter:BSD-2-Clause",
      "type": "license",
      "packageManager": "npm",
      "language": "js",
      "packageName": "stream-counter",
      "title": "BSD-2-Clause license",
      "description": "BSD-2-Clause license",
      "publicationTime": "2021-03-28T19:13:06.072Z",
      "creationTime": "2021-03-28T19:13:06.072Z",
      "patches": [],
      "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
      "severity": "medium",
      "from": [
        "mk.js-server@0.0.1",
        "express@3.21.2",
        "connect@2.30.2",
        "multiparty@3.3.2",
        "stream-counter@0.2.0"
      ],
      "upgradePath": [
        false,
        "express@4.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "stream-counter",
      "version": "0.2.0"
    }
  ],
  "ok": false,
  "dependencyCount": 105,
  "org": "mike-co.",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.19.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "Apache-1.0": {
        "licenseType": "Apache-1.0",
        "severity": "high",
        "instructions": ""
      },
      "BSD-2-Clause": {
        "licenseType": "BSD-2-Clause",
        "severity": "medium",
        "instructions": ""
      },
      "AML": {
        "licenseType": "AML",
        "severity": "high",
        "instructions": ""
      },
      "AFL-3.0": {
        "licenseType": "AFL-3.0",
        "severity": "low",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "projectId": "4c517eac-bd2b-4494-b70f-2ef74da9c8b8",
  "ignoreSettings": null,
  "summary": "49 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "license": "BSD-2-Clause",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:uglify-js:BSD-2-Clause",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "uglify-js",
        "title": "BSD-2-Clause license",
        "description": "BSD-2-Clause license",
        "publicationTime": "2021-03-28T20:51:33.117Z",
        "creationTime": "2021-03-28T20:51:33.117Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
        "severity": "medium",
        "from": [
          "mk.js-server@0.0.1",
          "socket.io@0.9.19",
          "socket.io-client@0.9.16",
          "uglify-js@1.2.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "uglify-js",
        "version": "1.2.5"
      }
    ],
    "upgrade": {
      "express@3.21.2": {
        "upgradeTo": "express@4.16.0",
        "upgrades": [
          "mime@1.3.4",
          "debug@2.2.0",
          "fresh@0.3.0",
          "ms@0.7.1",
          "minimist@0.0.8",
          "morgan@1.6.1",
          "base64-url@1.2.1",
          "negotiator@0.5.3",
          "qs@4.0.0",
          "stream-counter@0.2.0"
        ],
        "vulns": [
          "npm:mime:20170907",
          "npm:debug:20170905",
          "npm:fresh:20170908",
          "npm:ms:20170412",
          "SNYK-JS-MINIMIST-559764",
          "SNYK-JS-MORGAN-72579",
          "npm:base64-url:20180512",
          "npm:negotiator:20160616",
          "npm:qs:20170213",
          "snyk:lic:npm:stream-counter:BSD-2-Clause"
        ]
      },
      "socket.io@0.9.19": {
        "upgradeTo": "socket.io@2.4.0",
        "upgrades": [
          "socket.io@0.9.19",
          "xmlhttprequest@1.4.2",
          "uglify-js@1.2.5",
          "ws@0.4.32",
          "ws@0.4.32",
          "ws@0.4.32",
          "ws@0.4.32"
        ],
        "vulns": [
          "SNYK-JS-SOCKETIO-1024859",
          "SNYK-JS-XMLHTTPREQUEST-1082935",
          "npm:uglify-js:20151024",
          "npm:ws:20160104",
          "npm:ws:20160624",
          "npm:ws:20160920",
          "npm:ws:20171108"
        ]
      }
    },
    "patch": {},
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 18,
  "projectName": "mk.js-server",
  "displayTargetFile": "package-lock.json",
  "path": "/Users/mike/Projects/mk.js/server"
}
